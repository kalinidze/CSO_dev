<?xml version="1.0" encoding="UTF-8"?>
<rdf:RDF
  xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
  xmlns:owl="http://www.w3.org/2002/07/owl#"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
  xml:base="http://example.org/onto/">
  <owl:Class rdf:about="http://example.org/onto/class/google_eventarc_pipeline">
    <rdfs:label>google_eventarc_pipeline</rdfs:label>
    <rdfs:comment>#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This code is generated by Magic Modules using the following:
#
#     Configuration: https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/products/eventarc/Pipeline.yaml
#     Template:      https:#github.com/GoogleCloudPlatform/magic-modules/tree/main/mmv1/templates/terraform/resource.html.markdown.tmpl
#
#     DO NOT EDIT this file directly. Any changes made to this file will be
#     overwritten during the next generation cycle.
#
# ----------------------------------------------------------------------------
subcategory: "Eventarc"
description: |-
  The Eventarc Pipeline resource
---</rdfs:comment>
  </owl:Class>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_annotations">
    <rdfs:label>annotations</rdfs:label>
    <rdfs:comment>User-defined annotations. See https://google.aip.dev/128#annotations.

**Note**: This field is non-authoritative, and will only manage the annotations present in your configuration.
Please refer to the field 'effective_annotations' for all of the annotations present on the resource.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_create_time">
    <rdfs:label>create_time</rdfs:label>
    <rdfs:comment>The creation time.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
"2014-10-02T15:01:23.045123456Z".</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_crypto_key_name">
    <rdfs:label>crypto_key_name</rdfs:label>
    <rdfs:comment>Resource name of a KMS crypto key (managed by the user) used to
encrypt/decrypt the event data. If not set, an internal Google-owned key
will be used to encrypt messages. It must match the pattern
"projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}".</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_display_name">
    <rdfs:label>display_name</rdfs:label>
    <rdfs:comment>Display name of resource.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_effective_annotations">
    <rdfs:label>effective_annotations</rdfs:label>
    <rdfs:comment>All of annotations (key/value pairs) present on the resource in GCP, including the annotations configured through Terraform, other clients and services.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_effective_labels">
    <rdfs:label>effective_labels</rdfs:label>
    <rdfs:comment>All of labels (key/value pairs) present on the resource in GCP, including the labels configured through Terraform, other clients and services.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_etag">
    <rdfs:label>etag</rdfs:label>
    <rdfs:comment>This checksum is computed by the server based on the value of
other fields, and might be sent only on create requests to ensure that the
client has an up-to-date value before proceeding.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_id">
    <rdfs:label>id</rdfs:label>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_labels">
    <rdfs:label>labels</rdfs:label>
    <rdfs:comment>User labels attached to the Pipeline that can be used to group
resources. An object containing a list of "key": value pairs. Example: {
"name": "wrench", "mass": "1.3kg", "count": "3" }.

**Note**: This field is non-authoritative, and will only manage the labels present in your configuration.
Please refer to the field 'effective_labels' for all of the labels present on the resource.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_location">
    <rdfs:label>location</rdfs:label>
    <rdfs:comment>Resource ID segment making up resource 'name'. It identifies the resource within its parent collection as described in https://google.aip.dev/122.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_name">
    <rdfs:label>name</rdfs:label>
    <rdfs:comment>The resource name of the Pipeline. Must be unique within the
location of the project and must be in
'projects/{project}/locations/{location}/pipelines/{pipeline}' format.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_pipeline_id">
    <rdfs:label>pipeline_id</rdfs:label>
    <rdfs:comment>The user-provided ID to be assigned to the Pipeline. It should match the
format '^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$'.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_project">
    <rdfs:label>project</rdfs:label>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_terraform_labels">
    <rdfs:label>terraform_labels</rdfs:label>
    <rdfs:comment>The combination of labels configured directly on the resource
 and default labels configured on the provider.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_uid">
    <rdfs:label>uid</rdfs:label>
    <rdfs:comment>Server-assigned unique identifier for the Pipeline. The value
is a UUID4 string and guaranteed to remain unchanged until the resource is
deleted.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_update_time">
    <rdfs:label>update_time</rdfs:label>
    <rdfs:comment>The last-modified time.
A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and
"2014-10-02T15:01:23.045123456Z".</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_message_bus">
    <rdfs:label>message_bus</rdfs:label>
    <rdfs:comment>The resource name of the Message Bus to which events should be
published. The Message Bus resource should exist in the same project as
the Pipeline. Format:
'projects/{project}/locations/{location}/messageBuses/{message_bus}'</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_topic">
    <rdfs:label>topic</rdfs:label>
    <rdfs:comment>The resource name of the Pub/Sub topic to which events should be
published. Format:
'projects/{project}/locations/{location}/topics/{topic}'</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_workflow">
    <rdfs:label>workflow</rdfs:label>
    <rdfs:comment>The resource name of the Workflow whose Executions are triggered by
the events. The Workflow resource should be deployed in the same
project as the Pipeline. Format:
'projects/{project}/locations/{location}/workflows/{workflow}'</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_audience">
    <rdfs:label>audience</rdfs:label>
    <rdfs:comment>Audience to be used to generate the OIDC Token. The audience claim
identifies the recipient that the JWT is intended for. If
unspecified, the destination URI will be used.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_service_account">
    <rdfs:label>service_account</rdfs:label>
    <rdfs:comment>Service account email used to generate the OIDC Token.
The principal who calls this API must have
iam.serviceAccounts.actAs permission in the service account. See
https://cloud.google.com/iam/docs/understanding-service-accounts
for more information. Eventarc service agents must have
roles/roles/iam.serviceAccountTokenCreator role to allow the
Pipeline to create OpenID tokens for authenticated requests.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_scope">
    <rdfs:label>scope</rdfs:label>
    <rdfs:comment>OAuth scope to be used for generating OAuth access token. If not
specified, "https://www.googleapis.com/auth/cloud-platform" will be
used.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_service_account">
    <rdfs:label>service_account</rdfs:label>
    <rdfs:comment>Service account email used to generate the [OAuth
token](https://developers.google.com/identity/protocols/OAuth2).
The principal who calls this API must have
iam.serviceAccounts.actAs permission in the service account. See
https://cloud.google.com/iam/docs/understanding-service-accounts
for more information. Eventarc service agents must have
roles/roles/iam.serviceAccountTokenCreator role to allow Pipeline
to create OAuth2 tokens for authenticated requests.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_message_binding_template">
    <rdfs:label>message_binding_template</rdfs:label>
    <rdfs:comment>The CEL expression used to modify how the destination-bound HTTP
request is constructed.

If a binding expression is not specified here, the message
is treated as a CloudEvent and is mapped to the HTTP request according
to the CloudEvent HTTP Protocol Binding Binary Content Mode
(https://github.com/cloudevents/spec/blob/main/cloudevents/bindings/http-protocol-binding.md#31-binary-content-mode).
In this representation, all fields except the 'data' and
'datacontenttype' field on the message are mapped to HTTP request
headers with a prefix of 'ce-'.

To construct the HTTP request payload and the value of the content-type
HTTP header, the payload format is defined as follows:
1) Use the output_payload_format_type on the Pipeline.Destination if it
is set, else:
2) Use the input_payload_format_type on the Pipeline if it is set,
else:
3) Treat the payload as opaque binary data.

The 'data' field of the message is converted to the payload format or
left as-is for case 3) and then attached as the payload of the HTTP
request. The 'content-type' header on the HTTP request is set to the
payload format type or left empty for case 3). However, if a mediation
has updated the 'datacontenttype' field on the message so that it is
not the same as the payload format type but it is still a prefix of the
payload format type, then the 'content-type' header on the HTTP request
is set to this 'datacontenttype' value. For example, if the
'datacontenttype' is "application/json" and the payload format type is
"application/json; charset=utf-8", then the 'content-type' header on
the HTTP request is set to "application/json; charset=utf-8".

If a non-empty binding expression is specified then this expression is
used to modify the default CloudEvent HTTP Protocol Binding Binary
Content representation.
The result of the CEL expression must be a map of key/value pairs
which is used as follows:
- If a map named 'headers' exists on the result of the expression,
then its key/value pairs are directly mapped to the HTTP request
headers. The headers values are constructed from the corresponding
value type's canonical representation. If the 'headers' field doesn't
exist then the resulting HTTP request will be the headers of the
CloudEvent HTTP Binding Binary Content Mode representation of the final
message. Note: If the specified binding expression, has updated the
'datacontenttype' field on the message so that it is not the same as
the payload format type but it is still a prefix of the payload format
type, then the 'content-type' header in the 'headers' map is set to
this 'datacontenttype' value.
- If a field named 'body' exists on the result of the expression then
its value is directly mapped to the body of the request. If the value
of the 'body' field is of type bytes or string then it is used for
the HTTP request body as-is, with no conversion. If the body field is
of any other type then it is converted to a JSON string. If the body
field does not exist then the resulting payload of the HTTP request
will be data value of the CloudEvent HTTP Binding Binary Content Mode
representation of the final message as described earlier.
- Any other fields in the resulting expression will be ignored.

The CEL expression may access the incoming CloudEvent message in its
definition, as follows:
- The 'data' field of the incoming CloudEvent message can be accessed
using the 'message.data' value. Subfields of 'message.data' may also be
accessed if an input_payload_format has been specified on the Pipeline.
- Each attribute of the incoming CloudEvent message can be accessed
using the 'message.' value, where  is replaced with the
name of the attribute.
- Existing headers can be accessed in the CEL expression using the
'headers' variable. The 'headers' variable defines a map of key/value
pairs corresponding to the HTTP headers of the CloudEvent HTTP Binding
Binary Content Mode representation of the final message as described
earlier. For example, the following CEL expression can be used to
construct an HTTP request by adding an additional header to the HTTP
headers of the CloudEvent HTTP Binding Binary Content Mode
representation of the final message and by overwriting the body of the
request:

'''
{
"headers": headers.merge({"new-header-key": "new-header-value"}),
"body": "new-body"
}
'''
- The default binding for the message payload can be accessed using the
'body' variable. It conatins a string representation of the message
payload in the format specified by the 'output_payload_format' field.
If the 'input_payload_format' field is not set, the 'body'
variable contains the same message payload bytes that were published.

Additionally, the following CEL extension functions are provided for
use in this CEL expression:
- toBase64Url:
map.toBase64Url() -> string
- Converts a CelValue to a base64url encoded string
- toJsonString: map.toJsonString() -> string
- Converts a CelValue to a JSON string
- merge:
map1.merge(map2) -> map3
- Merges the passed CEL map with the existing CEL map the
function is applied to.
- If the same key exists in both maps, if the key's value is type
map both maps are merged else the value from the passed map is
used.
- denormalize:
map.denormalize() -> map
- Denormalizes a CEL map such that every value of type map or key
in the map is expanded to return a single level map.
- The resulting keys are "." separated indices of the map keys.
- For example:
{
"a": 1,
"b": {
"c": 2,
"d": 3
}
"e": [4, 5]
}
.denormalize()
-> {
"a": 1,
"b.c": 2,
"b.d": 3,
"e.0": 4,
"e.1": 5
}
- setField:
map.setField(key, value) -> message
- Sets the field of the message with the given key to the
given value.
- If the field is not present it will be added.
- If the field is present it will be overwritten.
- The key can be a dot separated path to set a field in a nested
message.
- Key must be of type string.
- Value may be any valid type.
- removeFields:
map.removeFields([key1, key2, ...]) -> message
- Removes the fields of the map with the given keys.
- The keys can be a dot separated path to remove a field in a
nested message.
- If a key is not found it will be ignored.
- Keys must be of type string.
- toMap:
[map1, map2, ...].toMap() -> map
- Converts a CEL list of CEL maps to a single CEL map
- toCloudEventJsonWithPayloadFormat:
message.toCloudEventJsonWithPayloadFormat() -> map
- Converts a message to the corresponding structure of JSON
format for CloudEvents.
- It converts 'data' to destination payload format
specified in 'output_payload_format'. If 'output_payload_format' is
not set, the data will remain unchanged.
- It also sets the corresponding datacontenttype of
the CloudEvent, as indicated by
'output_payload_format'. If no
'output_payload_format' is set it will use the value of the
"datacontenttype" attribute on the CloudEvent if present, else
remove "datacontenttype" attribute.
- This function expects that the content of the message will
adhere to the standard CloudEvent format. If it doesn't then this
function will fail.
- The result is a CEL map that corresponds to the JSON
representation of the CloudEvent. To convert that data to a JSON
string it can be chained with the toJsonString function.

The Pipeline expects that the message it receives adheres to the
standard CloudEvent format. If it doesn't then the outgoing message
request may fail with a persistent error.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_uri">
    <rdfs:label>uri</rdfs:label>
    <rdfs:comment>The URI of the HTTP enpdoint.

The value must be a RFC2396 URI string.
Examples: 'https://svc.us-central1.p.local:8080/route'.
Only the HTTPS protocol is supported.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_network_attachment">
    <rdfs:label>network_attachment</rdfs:label>
    <rdfs:comment>Name of the NetworkAttachment that allows access to the consumer VPC.

Format:
'projects/{PROJECT_ID}/regions/{REGION}/networkAttachments/{NETWORK_ATTACHMENT_NAME}'

Required for HTTP endpoint destinations. Must not be specified for
Workflows, MessageBus, or Topic destinations.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_schema_definition">
    <rdfs:label>schema_definition</rdfs:label>
    <rdfs:comment>The entire schema definition is stored in this field.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_schema_definition">
    <rdfs:label>schema_definition</rdfs:label>
    <rdfs:comment>The entire schema definition is stored in this field.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_schema_definition">
    <rdfs:label>schema_definition</rdfs:label>
    <rdfs:comment>The entire schema definition is stored in this field.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_schema_definition">
    <rdfs:label>schema_definition</rdfs:label>
    <rdfs:comment>The entire schema definition is stored in this field.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_log_severity">
    <rdfs:label>log_severity</rdfs:label>
    <rdfs:comment>The minimum severity of logs that will be sent to Stackdriver/Platform
Telemetry. Logs at severitiy ≥ this value will be sent, unless it is NONE. Possible values: ["NONE", "DEBUG", "INFO", "NOTICE", "WARNING", "ERROR", "CRITICAL", "ALERT", "EMERGENCY"]</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_transformation_template">
    <rdfs:label>transformation_template</rdfs:label>
    <rdfs:comment>The CEL expression template to apply to transform messages.
The following CEL extension functions are provided for
use in this CEL expression:
- merge:
map1.merge(map2) -> map3
- Merges the passed CEL map with the existing CEL map the
function is applied to.
- If the same key exists in both maps, if the key's value is type
map both maps are merged else the value from the passed map is
used.
- denormalize:
map.denormalize() -> map
- Denormalizes a CEL map such that every value of type map or key
in the map is expanded to return a single level map.
- The resulting keys are "." separated indices of the map keys.
- For example:
{
"a": 1,
"b": {
"c": 2,
"d": 3
}
"e": [4, 5]
}
.denormalize()
-> {
"a": 1,
"b.c": 2,
"b.d": 3,
"e.0": 4,
"e.1": 5
}
- setField:
map.setField(key, value) -> message
- Sets the field of the message with the given key to the
given value.
- If the field is not present it will be added.
- If the field is present it will be overwritten.
- The key can be a dot separated path to set a field in a nested
message.
- Key must be of type string.
- Value may be any valid type.
- removeFields:
map.removeFields([key1, key2, ...]) -> message
- Removes the fields of the map with the given keys.
- The keys can be a dot separated path to remove a field in a
nested message.
- If a key is not found it will be ignored.
- Keys must be of type string.
- toMap:
[map1, map2, ...].toMap() -> map
- Converts a CEL list of CEL maps to a single CEL map
- toDestinationPayloadFormat():
message.data.toDestinationPayloadFormat() -> string or bytes
- Converts the message data to the destination payload format
specified in Pipeline.Destination.output_payload_format
- This function is meant to be applied to the message.data field.
- If the destination payload format is not set, the function will
return the message data unchanged.
- toCloudEventJsonWithPayloadFormat:
message.toCloudEventJsonWithPayloadFormat() -> map
- Converts a message to the corresponding structure of JSON
format for CloudEvents
- This function applies toDestinationPayloadFormat() to the
message data. It also sets the corresponding datacontenttype of
the CloudEvent, as indicated by
Pipeline.Destination.output_payload_format. If no
output_payload_format is set it will use the existing
datacontenttype on the CloudEvent if present, else leave
datacontenttype absent.
- This function expects that the content of the message will
adhere to the standard CloudEvent format. If it doesn't then this
function will fail.
- The result is a CEL map that corresponds to the JSON
representation of the CloudEvent. To convert that data to a JSON
string it can be chained with the toJsonString function.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_max_attempts">
    <rdfs:label>max_attempts</rdfs:label>
    <rdfs:comment>The maximum number of delivery attempts for any message. The value must
be between 1 and 100.
The default value for this field is 5.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_max_retry_delay">
    <rdfs:label>max_retry_delay</rdfs:label>
    <rdfs:comment>The maximum amount of seconds to wait between retry attempts. The value
must be between 1 and 600.
The default value for this field is 60.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_min_retry_delay">
    <rdfs:label>min_retry_delay</rdfs:label>
    <rdfs:comment>The minimum amount of seconds to wait between retry attempts. The value
must be between 1 and 600.
The default value for this field is 5.</rdfs:comment>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_create">
    <rdfs:label>create</rdfs:label>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_delete">
    <rdfs:label>delete</rdfs:label>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
  <owl:DatatypeProperty rdf:about="http://example.org/onto/prop/google_eventarc_pipeline_update">
    <rdfs:label>update</rdfs:label>
    <rdfs:domain rdf:resource="http://example.org/onto/class/google_eventarc_pipeline"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:DatatypeProperty>
</rdf:RDF>
